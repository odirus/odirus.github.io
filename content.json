{"pages":[],"posts":[{"title":"Hexo使用中遇到的问题以及解决办法","text":"安装过程中的问题 当更新博客内容后，Github pages 会失效的问题 解决方案：执行 hexo-deploy 命令后 Github Pages 自定义域名失效的问题","link":"/2020/01/04/Hexo%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"title":"Kong插件开发-重写响应消息体","text":"本篇文章主要讲述如何通过 kong 插件重写响应给客户端的消息体内容，以下内容基于 kong v1.4.x 版本，官方文档。 按照官方文档，可以通过以下指令来重写返回给客户端的消息体，但只有在特定阶段才能重写 1234kong.response.exit(status[, body[, headers]])Phase:rewrite, access, admin_api, header_filter (only if body is nil) 假设我们的需求是当收到 Upstream 返回失败时（Http Status Code &gt;= 400 ）修改返回客户端的响应体，使用 kong pdk 中的接口都会提示执行错误，因为 header_filter 以及以后的阶段是不能直接修改的。 但我们可以通过执行 ngx 的一些指令来实现这个操作，该用法出现在 kong 官方插件 response-transformer 中，经过测试，可以满足该需求 1234567891011121314151617181920212223local kong = konglocal ngx = ngxlocal concat = table.concat# 因为会修改返回的响应体内容，所以要去掉此 headerkong.response.clear_header(&quot;Content-Length&quot;)# 修改返回给调用端的响应体内容local ctx = ngx.ctxlocal chunk, eof = ngx.arg[1], ngx.arg[2]ctx.rt_body_chunks = ctx.rt_body_chunks or {}ctx.rt_body_chunk_number = ctx.rt_body_chunk_number or 1if eof then local chunks = concat(ctx.rt_body_chunks) local body = responseBody ngx.arg[1] = body or chunkselse ctx.rt_body_chunks[ctx.rt_body_chunk_number] = chunk ctx.rt_body_chunk_number = ctx.rt_body_chunk_number + 1 ngx.arg[1] = nilend","link":"/2019/12/23/Kong%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E9%87%8D%E5%86%99%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF%E4%BD%93/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"kong","slug":"kong","link":"/tags/kong/"}],"categories":[]}